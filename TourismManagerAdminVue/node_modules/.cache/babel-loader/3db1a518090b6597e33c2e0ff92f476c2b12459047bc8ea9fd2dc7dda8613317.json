{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mixin } from \"../../../minix\";\nimport { editSysRotations, getSysRotationsById } from '../../../api/api';\nexport default {\n  mixins: [mixin],\n  data() {\n    return {\n      fileList: [],\n      dialogImageUrl: '',\n      dialogVisible: false,\n      formLabelWidth: '80px',\n      form: {\n        image: \"\"\n      },\n      rules: {\n        image: [{\n          required: true,\n          message: '请上传图片',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  props: ['updateVisible', 'updateId'],\n  methods: {\n    handleAvatorSuccess(res) {\n      let _this = this;\n      if (res.code == 1000) {\n        _this.$message({\n          type: 'success',\n          message: '上传成功!'\n        });\n        this.fileList.push({\n          url: this.$store.state.configure.HOST + res.message\n        });\n        this.form.image = res.message;\n      } else {\n        _this.$notify.error({\n          title: '错误',\n          message: res.message\n        });\n      }\n    },\n    handleRemove(file, fileList) {\n      this.form.content = \"\";\n      this.fileList = [];\n    },\n    handlePictureCardPreview(file) {\n      this.dialogImageUrl = file.url;\n      this.dialogVisible = true;\n    },\n    submit() {\n      this.$refs[\"ruleForm\"].validate(valid => {\n        if (valid) {\n          editSysRotations(this.form).then(res => {\n            if (res.code == 1000) {\n              this.$notify.success({\n                title: '成功',\n                message: \"保存成功\"\n              });\n              this.handleClose();\n            } else {\n              this.$notify.error({\n                title: '错误',\n                message: res.message\n              });\n            }\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    handleClose() {\n      this.fileList = [];\n      this.$emit(\"updateFalse\");\n    }\n  },\n  created() {},\n  mounted() {},\n  watch: {\n    updateId(newVal) {\n      if (newVal) {\n        getSysRotationsById({\n          id: newVal\n        }).then(res => {\n          if (res.code == 1000) {\n            this.form = res.data;\n            this.fileList.push({\n              url: this.$store.state.configure.HOST + this.form.image\n            });\n          } else {\n            this.$notify.error({\n              title: '错误',\n              message: res.message\n            });\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["mixin","editSysRotations","getSysRotationsById","mixins","data","fileList","dialogImageUrl","dialogVisible","formLabelWidth","form","image","rules","required","message","trigger","props","methods","handleAvatorSuccess","res","_this","code","$message","type","push","url","$store","state","configure","HOST","$notify","error","title","handleRemove","file","content","handlePictureCardPreview","submit","$refs","validate","valid","then","success","handleClose","$emit","created","mounted","watch","updateId","newVal","id"],"sources":["src/components/system/rotations/updateRotations.vue"],"sourcesContent":["<template>\r\n<div>\r\n  <el-dialog title=\"编辑轮播图\" width=\"40%\" :destroy-on-close=\"true\" :visible.sync=\"updateVisible\" :before-close=\"handleClose\">\r\n    <el-form :model=\"form\" :rules=\"rules\" ref=\"ruleForm\">\r\n      <el-row :gutter=\"10\">\r\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"24\" :xl=\"24\">\r\n            <span class=\"search-title\">\r\n                图片:\r\n                </span>\r\n            <div style=\"width:100%\">\r\n              <el-form-item prop=\"image\" style=\"margin-bottom:0\">\r\n                <el-upload\r\n                  :file-list=\"fileList\"\r\n                  ref=\"upload\"\r\n                  :action=\"uploadImageUrl()\"\r\n                  accept=\"image/*\"\r\n                  :multiple=\"false\"\r\n                  :limit=\"1\"\r\n                  :before-upload=\"beforeAvatorUpload\"\r\n                  list-type=\"picture-card\"\r\n                  :on-preview=\"handlePictureCardPreview\"\r\n                  :on-exceed=\"handleExceed\"\r\n                  :on-success=\"handleAvatorSuccess\"\r\n                  :on-remove=\"handleRemove\">\r\n                  <i class=\"el-icon-plus\"></i>\r\n                </el-upload>\r\n                <el-dialog :visible.sync=\"dialogVisible\">\r\n                  <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\">\r\n                </el-dialog>\r\n              </el-form-item>\r\n            </div>\r\n        </el-col>\r\n      </el-row>\r\n    </el-form>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button   type=\"primary\" @click=\"submit\">确 定</el-button>\r\n      <el-button   @click=\"handleClose\">取 消</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n  import {mixin} from \"../../../minix\";\r\n  import {editSysRotations,getSysRotationsById} from '../../../api/api'\r\n  export default {\r\n    mixins: [mixin],\r\n    data() {\r\n      return{\r\n        fileList: [],\r\n        dialogImageUrl: '',\r\n        dialogVisible: false,\r\n        formLabelWidth: '80px',\r\n        form: {\r\n          image: \"\",\r\n        },\r\n        rules: {\r\n          image: [\r\n            { required: true, message: '请上传图片', trigger: 'blur' },\r\n          ],\r\n        },\r\n      }\r\n    },\r\n    props: ['updateVisible','updateId'],\r\n    methods: {\r\n      handleAvatorSuccess(res) {\r\n        let _this = this;\r\n        if(res.code == 1000){\r\n            _this.$message({\r\n              type: 'success',\r\n              message: '上传成功!'\r\n            });\r\n            this.fileList.push({url:this.$store.state.configure.HOST + res.message})\r\n            this.form.image = res.message\r\n        }else{\r\n          _this.$notify.error({\r\n            title: '错误',\r\n            message: res.message\r\n          });\r\n        }\r\n      },\r\n      handleRemove(file, fileList) {\r\n        this.form.content = \"\"\r\n        this.fileList = []\r\n      },\r\n      handlePictureCardPreview(file) {\r\n        this.dialogImageUrl = file.url;\r\n        this.dialogVisible = true;\r\n      },\r\n      submit() {\r\n        this.$refs[\"ruleForm\"].validate((valid) => {\r\n          if (valid) {\r\n            editSysRotations(this.form).then(res => {\r\n              if(res.code == 1000) {\r\n                this.$notify.success({\r\n                  title: '成功',\r\n                  message: \"保存成功\"\r\n                });\r\n                this.handleClose();\r\n              } else {\r\n                this.$notify.error({\r\n                  title: '错误',\r\n                  message: res.message\r\n                });\r\n              }\r\n            })\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      handleClose() {\r\n        this.fileList = []\r\n        this.$emit(\"updateFalse\")\r\n      },\r\n     \r\n    },\r\n    created() {\r\n     \r\n    },\r\n    mounted() {\r\n      \r\n    },\r\n    watch: {\r\n      updateId(newVal) {\r\n        if(newVal) {\r\n          getSysRotationsById({id:newVal}).then(res => {\r\n            if(res.code == 1000) {\r\n              this.form = res.data\r\n              this.fileList.push({url:this.$store.state.configure.HOST + this.form.image})\r\n            } else {\r\n              this.$notify.error({\r\n                title: '错误',\r\n                message: res.message\r\n              });\r\n            }\r\n          })\r\n        }\r\n        \r\n      }\r\n    }\r\n }\r\n</script>\r\n\r\n<style lang=scss scoped>\r\n  .el-col {\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      margin-top: 24px\r\n  }\r\n  .search-title {\r\n      font-family: '黑体';\r\n      float: right;\r\n      white-space: nowrap;\r\n      font-size: 14px;\r\n      width: 84px;\r\n      text-align: right;\r\n  }\r\n  .el-tree {\r\n      border: 1px solid #BDC1C9;\r\n  }\r\n</style>"],"mappings":";AA2CA,SAAAA,KAAA;AACA,SAAAC,gBAAA,EAAAC,mBAAA;AACA;EACAC,MAAA,GAAAH,KAAA;EACAI,KAAA;IACA;MACAC,QAAA;MACAC,cAAA;MACAC,aAAA;MACAC,cAAA;MACAC,IAAA;QACAC,KAAA;MACA;MACAC,KAAA;QACAD,KAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAC,KAAA;EACAC,OAAA;IACAC,oBAAAC,GAAA;MACA,IAAAC,KAAA;MACA,IAAAD,GAAA,CAAAE,IAAA;QACAD,KAAA,CAAAE,QAAA;UACAC,IAAA;UACAT,OAAA;QACA;QACA,KAAAR,QAAA,CAAAkB,IAAA;UAAAC,GAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAC,SAAA,CAAAC,IAAA,GAAAV,GAAA,CAAAL;QAAA;QACA,KAAAJ,IAAA,CAAAC,KAAA,GAAAQ,GAAA,CAAAL,OAAA;MACA;QACAM,KAAA,CAAAU,OAAA,CAAAC,KAAA;UACAC,KAAA;UACAlB,OAAA,EAAAK,GAAA,CAAAL;QACA;MACA;IACA;IACAmB,aAAAC,IAAA,EAAA5B,QAAA;MACA,KAAAI,IAAA,CAAAyB,OAAA;MACA,KAAA7B,QAAA;IACA;IACA8B,yBAAAF,IAAA;MACA,KAAA3B,cAAA,GAAA2B,IAAA,CAAAT,GAAA;MACA,KAAAjB,aAAA;IACA;IACA6B,OAAA;MACA,KAAAC,KAAA,aAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAtC,gBAAA,MAAAQ,IAAA,EAAA+B,IAAA,CAAAtB,GAAA;YACA,IAAAA,GAAA,CAAAE,IAAA;cACA,KAAAS,OAAA,CAAAY,OAAA;gBACAV,KAAA;gBACAlB,OAAA;cACA;cACA,KAAA6B,WAAA;YACA;cACA,KAAAb,OAAA,CAAAC,KAAA;gBACAC,KAAA;gBACAlB,OAAA,EAAAK,GAAA,CAAAL;cACA;YACA;UACA;QACA;UACA;QACA;MACA;IACA;IACA6B,YAAA;MACA,KAAArC,QAAA;MACA,KAAAsC,KAAA;IACA;EAEA;EACAC,QAAA,GAEA;EACAC,QAAA,GAEA;EACAC,KAAA;IACAC,SAAAC,MAAA;MACA,IAAAA,MAAA;QACA9C,mBAAA;UAAA+C,EAAA,EAAAD;QAAA,GAAAR,IAAA,CAAAtB,GAAA;UACA,IAAAA,GAAA,CAAAE,IAAA;YACA,KAAAX,IAAA,GAAAS,GAAA,CAAAd,IAAA;YACA,KAAAC,QAAA,CAAAkB,IAAA;cAAAC,GAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAC,SAAA,CAAAC,IAAA,QAAAnB,IAAA,CAAAC;YAAA;UACA;YACA,KAAAmB,OAAA,CAAAC,KAAA;cACAC,KAAA;cACAlB,OAAA,EAAAK,GAAA,CAAAL;YACA;UACA;QACA;MACA;IAEA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}